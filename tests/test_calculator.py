import pytest

from src.tokenization import tokenize
from src.conversion_to_rpn import to_rpn
from src.calculation import calculate


def test_tokenize_errors() -> None:
    """
    Тест проверки синтаксических ошибок
    :return: ничего не возвращает
    """
    incorrect_expressions = [
        # синтаксические ошибки
        '',
        '1 + + 3',
        '* 3 + 1',
        '1 + 3 +',
        '1 1 + 3',
        '(1 + 3) 1',
        '1 (1 + 3)',
        '1 + 3)',
        '(1 + 3',
        '(1 + 3) (1 + 3)',
        '1. + 3',
        '1 + ()',
        '1.1.1 + 3',
        '1a + 3',
        '1 / / 3'
    ]
    for expr in incorrect_expressions:
        with pytest.raises(ValueError):
            tokenize(expr)

def test_calculate_errors() -> None:
    """
    Тест обработки вычислительных ошибок
    :return: ничего не возвращает
    """
    incorrect_expressions = [
        # вычислительные ошибки
        ['1', '0', '/'],
        ['1.1', '2', '#'],
        ['1.2', '2', "%"],
        ['2', 'u-', '2.1', '^']
    ]
    for expr in incorrect_expressions:
        with pytest.raises(ValueError):
            calculate(expr)

def test_tokenize() -> None:
    """
    Тест токенизации
    :return: ничего не возвращает
    """
    inputs = [
        "1",
        "((1))",
        "-1 + 2 - 3 * 4 / 5",
        "5 * (1 + 3)",
        "2 ^ 3 ^ 2",
        "-(1 + 3)",
        "-3 + 5 * 2 ^ 3 / (4 - 2)",
        "(10 + 2) // 4 + 7 % 3 * (-2)",
        "5 // 2",
        "5 # 2",
        "5 ** 2",
        "5 ^ 2",
        "0.5 + 1",
        ".5 + 1",
        "0,5 + 1",
        ",5 + 1"
    ]
    results = [
        ['1'],
        ['(', '(', '1', ')', ')'],
        ['u-', '1', '+', '2', '-', '3', '*', '4', '/', '5'],
        ['5', '*', '(', '1', '+', '3', ')'],
        ['2', '^', '3', '^', '2'],
        ['u-', '(', '1', '+', '3', ')'],
        ['u-', '3', '+', '5', '*', '2', '^', '3', '/', '(', '4', '-', '2', ')'],
        ['(', '10', '+', '2', ')', '#', '4', '+', '7', '%', '3', '*', '(', 'u-', '2', ')'],
        ['5', '#', '2'],
        ['5', '#', '2'],
        ['5', '^', '2'],
        ['5', '^', '2'],
        ['0.5', '+', '1'],
        ['.5', '+', '1'],
        ['0.5', '+', '1'],
        ['.5', '+', '1']
    ]
    for i in range(len(inputs)):
        assert tokenize(inputs[i]) == results[i]

def test_to_rpn() -> None:
    """
    Тест перевода в обратную польскую запись
    :return: ничего не возвращает
    """
    inputs = [
        ['u-', '1', '+', '2', '-', '3', '*', '4', '/', '5'],
        ['(', '10', '+', '2', ')', '#', '4', '+', '7', '%', '3', '*', '(', 'u-', '2', ')'],
        ['(', '(', '1', ')', ')'],
        ['u-', '(', '1', '+', '3', ')'],
        ['2', '^', '3', '^', '2'],
        ['u-', '(', '1', '+', '3', ')'],
        ['1', '+', '2', '*', '3'],
        ['1', '*', '2', '+', '3'],
        ['(', '1', '+', '2', ')', '*', '3'],
        ['1', '+', '2', '*', '3', '^', '4'],
        ['1', '+', '2', '^', '3', '*', '4'],
        ['u-', '1', '+', 'u-', '2'],
        ['u-', '1', '*', 'u-', '2'],
        ['1', '#', '2', '+', '3', '%', '4'],
        ['(', '1', '+', '2', ')', '#', '3'],
        ['1', '#', '(', '2', '+', '3', ')'],
        ['1', '^', '2', '^', '3'],
        ['1', '*', '2', '^', '3'],
        ['1', '^', '2', '*', '3'],
        ['1', '+', '2', '*', '3', '-', '4', '/', '5'],
        ['u-', '(', 'u-', '1', ')'],
        ['1', '+', '(', '2', '*', '3', '+', '4', ')'],
        ['(', '1', '+', '2', ')', '*', '(', '3', '+', '4', ')'],
        ['1', '*', '2', '*', '3', '*', '4'],
        ['1', '+', '2', '+', '3', '+', '4'],
    ]
    results = [
        ['1', 'u-', '2', '+', '3', '4', '*', '5', '/', '-'],
        ['10', '2', '+', '4', '#', '7', '3', '%', '2', 'u-', '*', '+'],
        ['1'],
        ['1', '3', '+', 'u-'],
        ['2', '3', '2', '^', '^'],
        ['1', '3', '+', 'u-'],
        ['1', '2', '3', '*', '+'],
        ['1', '2', '*', '3', '+'],
        ['1', '2', '+', '3', '*'],
        ['1', '2', '3', '4', '^', '*', '+'],
        ['1', '2', '3', '^', '4', '*', '+'],
        ['1', 'u-', '2', 'u-', '+'],
        ['1', 'u-', '2', 'u-', '*'],
        ['1', '2', '#', '3', '4', '%', '+'],
        ['1', '2', '+', '3', '#'],
        ['1', '2', '3', '+', '#'],
        ['1', '2', '3', '^', '^'],
        ['1', '2', '3', '^', '*'],
        ['1', '2', '^', '3', '*'],
        ['1', '2', '3', '*', '+', '4', '5', '/', '-'],
        ['1', 'u-', 'u-'],
        ['1', '2', '3', '*', '4', '+', '+'],
        ['1', '2', '+', '3', '4', '+', '*'],
        ['1', '2', '*', '3', '*', '4', '*'],
        ['1', '2', '+', '3', '+', '4', '+'],
    ]
    for i in range(len(inputs)):
        assert to_rpn(inputs[i]) == results[i]

def test_calculate() -> None:
    """
    Тест вычисления
    :return: ничего не возвращает
    """
    inputs = [
        ['2', '3', '+'],
        ['3', '4', '2', '*', '+'],
        ['5', '1', '2', '+', '4', '*', '+', '3', '-'],
        ['2', '3', '^', '4', '/'],
        ['3', 'u-', '2', '*'],
        ['10', '3', '#', '3', '2', '%', '+'],
        ['15', '7', '1', '1', '+', '-', '#', '3', '*', '2', '1', '1', '+', '+', '-'],
        ['2', '3', '2', '^', '^'],
        ['0.5', '2', '*', '1.5', '3', '/', '+', '4', 'u-', '+'],
        ['8', '2', '#', '3', '2', '^', '*', '5', 'u-', '4', '2', '%', '-', '+']
    ]
    results = [
        5,
        11,
        14,
        2.0,
        -6,
        4,
        5,
        512,
        -2.5,
        31
    ]
    for i in range(len(inputs)):
        assert calculate(inputs[i]) == results[i]
